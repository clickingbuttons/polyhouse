CREATE TABLE {{ .database }}.{{ .table }}{{ if .cluster }}_shard ON CLUSTER {{ .cluster }}{{ end }}
(
  seqnum             UInt64,
  tape               Enum8({{ .tapes }}),
  id                 UInt64,
  ticker             LowCardinality(String),
  ts                 Datetime64(9, 'America/New_York'),
  ts_participant     Nullable(Datetime64(9, 'America/New_York')),
  ts_trf             Nullable(Datetime64(9, 'America/New_York')),
  price              Float64,
  size               UInt32,
  conditions         Array(UInt8),
  correction         UInt8,
  exchange           Enum8({{ .participants }}),
  trf                Enum8({{ .participants }}),
  update             Bool materialized not(hasAny(conditions, {{ .badConditions }})),
  update_volume      Bool materialized not(hasAny(conditions, {{ .badVolumeConditions }})),
  cons_update        Bool materialized not(hasAny(conditions, {{ .consBadConditions }})),
  cons_update_volume Bool materialized not(hasAny(conditions, {{ .consBadVolumeConditions }})),
)
Engine = 
{{ if .cluster }}
ReplicatedMergeTree(
	'/clickhouse/tables/{shard}/{database}/{{ .table }}',
	'{replica}'
)
{{ else }}
MergeTree()
{{ end }}
PARTITION BY toYYYYMMDD(ts)
PRIMARY KEY (ticker, ts)
ORDER BY (ticker, ts, seqnum);

{{ if .cluster }}
CREATE TABLE {{ .database }}.{{ .table }} ON CLUSTER {{ .cluster }}
AS {{ .database }}.{{ .table }}_shard
ENGINE = Distributed(
	'{cluster}',
	{{ .database }},
	{{ .table }}_shard,
	cityHash64(ticker)
);
{{ end }}
